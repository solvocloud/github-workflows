name: Reusable Build and Deploy

on:
  workflow_call:
    inputs:
      projects:
        required: true
        type: string
        description: JSON array of project paths
      repo-name:
        required: true
        type: string
        description: repo name for s3 upload
        

jobs:
  build-net-project:
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
      pull-requests: write
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Connect to AWS github identity provider
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ORG_GITHUB_ENTRY_ROOT_ACCOUNT_ROLE_ARN }}
          role-session-name: github-action-build-and-deploy
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure AWS credentials for account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ORG_GITHUB_BUILD_DEV_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-chaining: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x' # Adjust as needed
          
      - name: Prepare NuGet Repository
        run: |
            echo "Connecting to CodeArtifact"
            dotnet tool install -g AWS.CodeArtifact.NuGet.CredentialProvider
            dotnet codeartifact-creds install
            dotnet nuget remove source nuget.org 
            dotnet nuget add source -n codeartifact $(aws codeartifact get-repository-endpoint --domain solvo --domain-owner ${{vars.AWS_DEV_ACCOUNT_NUMBER}} --repository nuget-store --format nuget --query repositoryEndpoint --output text)"v3/index.json"
        shell: bash

      - name: Run Unit Tests
        run: |
           set -e
           dotnet test --verbosity quiet
      
      - name: .NET Build & Zip Projects
        run: |
          mkdir build_output
          for project_path in $(echo '${{ inputs.projects }}' | jq -r '.[]'); do
            PROJECT_NAME=${project_path#src/}
            echo "Building: $PROJECT_NAME"
            dotnet publish -p:TreatWarningsAsErrors=true -c release -o published/$PROJECT_NAME $project_path -r linux-x64 --self-contained false
            echo "JOB_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" > published/$PROJECT_NAME/info.txt
            echo "REVISION=${{ github.sha }}" >> published/$PROJECT_NAME/info.txt
          done      
          zip -rj build_output/$PROJECT_NAME.zip published/$PROJECT_NAME 
          
      - name: Upload To Artifacts Bucket
        run: |            
          S3_PREFIX="${{ vars.AWS_ARTIFACTS_BUCKET_NAME }}/${{ inputs.repo-name }}/$GITHUB_SHA"
          echo -e "upload artifacts to -\nhttps://s3.console.aws.amazon.com/s3/buckets/${S3_PREFIX}/\n"
          aws s3 sync --quiet build_output/ s3://${S3_PREFIX}/
          
        